// Generated by CoffeeScript 1.7.1
(function() {
  var animate, camera, controls, init, objects, ray, renderer, scene, time;

  objects = [];

  controls = null;

  ray = null;

  time = Date.now();

  renderer = null;

  scene = null;

  camera = null;

  init = function() {
    var cylinder, floor, light, skyBox, skyBoxGeometry, skyBoxMaterial;
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
    camera.position.y = 60;
    scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0xffffff, 0, 750);
    light = new THREE.DirectionalLight(0xffffff, 1.5);
    light.position.set(1, 1, 1);
    scene.add(light);
    light = new THREE.DirectionalLight(0xffffff, 0.75);
    light.position.set(-1, -0.5, -1);
    scene.add(light);
    controls = new window.Movement(camera);
    scene.add(controls.getObject());
    ray = new THREE.Raycaster();
    ray.ray.direction.set(0, -1, 0);
    skyBoxGeometry = new THREE.CubeGeometry(1000, 1000, 1000);
    skyBoxMaterial = new THREE.MeshBasicMaterial({
      color: 0x666666,
      side: THREE.DoubleSide
    });
    skyBox = new THREE.Mesh(skyBoxGeometry, skyBoxMaterial);
    scene.add(skyBox);
    floor = new window.Floor();
    console.log(floor.mesh);
    scene.add(floor.mesh);
    cylinder = new THREE.Mesh(new THREE.CylinderGeometry(10, 10, 40, 1180, 1, false), new THREE.MeshNormalMaterial());
    cylinder.position.z = -150;
    scene.add(cylinder);
    renderer = new THREE.WebGLRenderer();
    renderer.setClearColor(0xffffff);
    renderer.setSize(window.innerWidth, window.innerHeight);
    return document.body.appendChild(renderer.domElement);
  };

  animate = function() {
    var distance, intersections;
    requestAnimationFrame(animate);
    controls.onObject(false);
    ray.ray.origin.copy(controls.getObject().position);
    ray.ray.origin.y -= 10;
    intersections = ray.intersectObjects(objects);
    if (intersections.length > 0) {
      distance = intersections[0].distance;
      if (distance > 0 && distance < 10) {
        controls.onObject(true);
      }
    }
    controls.update(Date.now() - time);
    renderer.render(scene, camera);
    return time = Date.now();
  };

  window.onload = function() {
    console.log('1');
    init();
    animate();
    return console.log('2');
  };

}).call(this);
