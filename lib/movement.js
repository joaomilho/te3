// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Movement = (function() {
    function Movement(camera) {
      this.update = __bind(this.update, this);
      var onKeyDown, onKeyUp;
      camera.rotation.set(0, 0, 0);
      this.pitchObject = new THREE.Object3D();
      this.pitchObject.add(camera);
      this.yawObject = new THREE.Object3D();
      this.yawObject.position.y = 10;
      this.yawObject.add(this.pitchObject);
      this.moveForward = false;
      this.moveBackward = false;
      this.moveLeft = false;
      this.moveRight = false;
      this.rotateLeft = false;
      this.rotateRight = false;
      this.rotateUp = false;
      this.rotateDown = false;
      this.isOnObject = false;
      this.velocity = new THREE.Vector3();
      this.pi_2 = Math.PI / 2;
      onKeyDown = (function(_this) {
        return function(event) {
          switch (event.keyCode) {
            case 81:
              return _this.moveLeft = true;
            case 69:
              return _this.moveRight = true;
            case 38:
            case 87:
              return _this.moveForward = true;
            case 37:
            case 65:
              return _this.rotateLeft = true;
            case 40:
            case 83:
              return _this.moveBackward = true;
            case 39:
            case 68:
              return _this.rotateRight = true;
          }
        };
      })(this);
      onKeyUp = (function(_this) {
        return function(event) {
          switch (event.keyCode) {
            case 81:
              return _this.moveLeft = false;
            case 69:
              return _this.moveRight = false;
            case 38:
            case 87:
              return _this.moveForward = false;
            case 37:
            case 65:
              return _this.rotateLeft = false;
            case 40:
            case 83:
              return _this.moveBackward = false;
            case 39:
            case 68:
              return _this.rotateRight = false;
          }
        };
      })(this);
      document.addEventListener('keydown', onKeyDown, false);
      document.addEventListener('keyup', onKeyUp, false);
    }

    Movement.prototype.getObject = function() {
      return this.yawObject;
    };

    Movement.prototype.onObject = function(boolean) {
      return this.isOnObject = boolean;
    };

    Movement.prototype.getDirection = function() {
      var direction, rotation;
      direction = new THREE.Vector3(0, 0, -1);
      rotation = new THREE.Euler(0, 0, 0, "YXZ");
      return (function(_this) {
        return function(v) {
          rotation.set(_this.pitchObject.rotation.x, _this.yawObject.rotation.y, 0);
          v.copy(direction).applyEuler(rotation);
          return v;
        };
      })(this);
    };

    Movement.prototype.update = function(delta) {
      var canJump, movementX, movementY;
      delta *= 0.1;
      this.velocity.x += (-this.velocity.x) * 0.08 * delta;
      this.velocity.z += (-this.velocity.z) * 0.08 * delta;
      this.velocity.y -= 0.25 * delta;
      if (this.moveForward) {
        this.velocity.z -= 0.12 * delta;
      }
      if (this.moveBackward) {
        this.velocity.z += 0.12 * delta;
      }
      if (this.moveLeft) {
        this.velocity.x -= 0.12 * delta;
      }
      if (this.moveRight) {
        this.velocity.x += 0.12 * delta;
      }
      if (this.isOnObject === true) {
        this.velocity.y = Math.max(0, this.velocity.y);
      }
      movementX = 0;
      movementY = 0;
      if (this.rotateLeft) {
        movementX = -3 * delta;
      }
      if (this.rotateRight) {
        movementX = 3 * delta;
      }
      this.yawObject.rotation.y -= movementX * 0.002;
      this.yawObject.translateX(this.velocity.x);
      this.yawObject.translateY(this.velocity.y);
      this.yawObject.translateZ(this.velocity.z);
      if (this.yawObject.position.y < 10) {
        this.velocity.y = 0;
        this.yawObject.position.y = 10;
        return canJump = true;
      }
    };

    return Movement;

  })();

}).call(this);
